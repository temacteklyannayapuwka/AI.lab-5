#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os

class FileSystemSearch:
    def __init__(self, start_directory):
        self.start_directory = start_directory

    def search_files(self, condition):
        """ Поиск файлов по заданному условию (например, по имени или расширению) """
        result = []
        # Используем рекурсивный поиск в глубину (DFS)
        self._dfs(self.start_directory, condition, result)
        return result

    def _dfs(self, current_directory, condition, result):
        """ Рекурсивный поиск в глубину (DFS) """
        try:
            # Перебираем все файлы и папки в текущем каталоге
            for entry in os.scandir(current_directory):
                if entry.is_dir():  # Если это директория, рекурсивно ищем внутри
                    self._dfs(entry.path, condition, result)
                elif entry.is_file():  # Если это файл, проверяем условие
                    if condition(entry):  # Если файл соответствует условию, добавляем в результат
                        result.append(entry.path)
        except PermissionError:
            print(f"Нет прав доступа к директории: {current_directory}")
        except FileNotFoundError:
            print(f"Директория не найдена: {current_directory}")

# Пример использования

# Условие поиска: файл с расширением '.txt'
def condition(file):
    return file.name.endswith('.txt')

# Инициализация поиска с корневой директорией (например, текущая директория)
searcher = FileSystemSearch("/path/to/start/directory")

# Выполнение поиска
found_files = searcher.search_files(condition)

# Вывод найденных файлов
if found_files:
    print("Найденные файлы:")
    for file in found_files:
        print(file)
else:
    print("Файлы не найдены.")
